package com.appirio.service.member.events;

import com.appirio.eventsbus.api.client.EventProducer;
import com.appirio.eventsbus.api.client.util.jsonevent.Event;
import com.appirio.eventsbus.api.client.util.jsonevent.EventHandler;
import com.appirio.service.member.api.MemberProfile;
import com.appirio.service.member.dao.MemberProfileDAO;
import com.appirio.supply.constants.MemberStatus;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.node.ObjectNode;
import com.neovisionaries.i18n.CountryCode;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.ArrayList;
import java.util.Date;

/**
 * Handles member creation events generated by the identity service
 *
 * @author mdesiderio@appirio.com
 *
 */
public class MemberCreationEventHandler implements EventHandler {

	/**
	 * Mapper to perform json marshalling
	 */
	private final ObjectMapper mapper = new ObjectMapper();
	
	/**
	 * Logger
	 */
	private final Logger logger = LoggerFactory.getLogger(MemberCreationEventHandler.class);  
	
	/**
	 * Member profile data access 
	 */
	private final MemberProfileDAO dao;

	/**
	 * Event producer, used to send error messages to the dead letter queue
	 */
	private EventProducer eventProducer;
	
	/**
	 * Constructor that initializes the dao and events producer
	 * @param dao member profile data access
	 * @param eventProducer dead letter queue access
	 */
	public MemberCreationEventHandler(MemberProfileDAO dao, EventProducer eventProducer) {
		this.dao = dao;
		this.eventProducer = eventProducer;
	}
	
	/**
	 * Receives the member created event, and updates dynamodb
	 * @see EventHandler
	 */
	@Override
	public void handleEvent(Event memberEvent) {
		try {
			logger.info("Received member creation event: " + memberEvent.getPayload());
			JsonNode profile = mapper.readTree(memberEvent.getJsonPayload());
			
			MemberProfile memberProfile = new MemberProfile();
			
			memberProfile.setUserId(profile.get("id").asInt());
			memberProfile.setHandle(profile.get("handle").asText());
			memberProfile.setHandleLower(profile.get("handle").asText().toLowerCase());
			memberProfile.setEmail(profile.get("email").asText());
			if(profile.has("firstName")) {
				memberProfile.setFirstName(profile.get("firstName").asText());
			}
			if(profile.has("lastName")) {
				memberProfile.setLastName(profile.get("lastName").asText());
			}
			if(profile.has("country") && profile.get("country").has("code")) {
				CountryCode country = CountryCode.getByCode(profile.get("country").get("code").asInt());
				if(country != null) {
					String countryCode = CountryCode.getByCode(profile.get("country").get("code").asInt()).getAlpha3();
					
					memberProfile.setHomeCountryCode(countryCode);
					memberProfile.setCompetitionCountryCode(countryCode);
				}
			}
			memberProfile.setCreatedAt(new Date());
			memberProfile.setCreatedBy(profile.get("id").asText());
			memberProfile.setUpdatedBy(profile.get("id").asText());
			memberProfile.setUpdatedAt(new Date());
			memberProfile.setAddresses(new ArrayList<>());
			memberProfile.setTracks(new ArrayList<>());
			if(profile.get("active").asBoolean()) {
				memberProfile.setStatus(MemberStatus.ACTIVE.toString());
			} else {
				memberProfile.setStatus(MemberStatus.UNVERIFIED.toString());
			}
			
			dao.updateMemberProfile(memberProfile , false);
		} catch (Exception e) {
			try {
				ObjectNode error = mapper.createObjectNode();
				error.put("payload", memberEvent.getJsonPayload());
				error.put("message", e.getMessage());
				error.put("type", e.getClass().getName());
				eventProducer.publish("event.user.creation.error", memberEvent.getPayload());
			} catch (Exception e1) {
				logger.error(e1.getMessage(), e1);
			}
			logger.error(e.getMessage(), e);
		}
	}
}